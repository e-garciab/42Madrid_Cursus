printf("Hola\n");               // Un argumento
printf("N칰mero: %d\n", 10);      // Dos argumentos
printf("Suma: %d + %d = %d\n", 2, 3, 5);  // Cuatro argumentos


C칩mo crear una funci칩n vari치dica
Para definir una funci칩n vari치dica en C, usamos stdarg.h

#include <stdarg.h>
#include <stdio.h>

int suma(int cantidad, ...) {
    va_list args;					// declara una lista de argumentos
    va_start(args, cantidad);		// inicia la lista, indicando que cantisas es el 칰ltimo argumento fijo

    int total = 0;
    for (int i = 0; i < cantidad; i++) {
        total += va_arg(args, int);		// obtiene los argumentos uno por uno
    }

    va_end(args);						// finaliza el uso de los argumentos
    return total;
}

int main() {
    printf("Resultado: %d\n", suma(3, 5, 10, 15));  // 5 + 10 + 15 = 30
    return 0;
}


Estas funciones (va_start, va_arg, va_copy, y va_end) pertenecen a la biblioteca <stdarg.h> 
y se usan en funciones vari치dicas, es decir, funciones que pueden recibir un n칰mero variable de argumentos.

1. va_list (Lista de argumentos)
Antes de usar estas funciones, necesitamos declarar una lista de argumentos con va_list. 
Esta lista servir치 para manejar los valores pasados a la funci칩n.

va_list args;  // args ser치 la lista donde almacenaremos los argumentos

2. va_start (Inicia la lista de argumentos)
Esta funci칩n inicia la lista de argumentos para poder usarlos.

va_start(args, ultimo_parametro_fijo);

游댳 args: Es la lista de argumentos que hemos declarado.
游댳 ultimo_parametro_fijo: Es el 칰ltimo argumento obligatorio antes de los opcionales.

va_start debe llamarse antes de acceder a los argumentos.


3. va_arg (Obtener un argumento de la lista)
Despu칠s de iniciar la lista con va_start, usamos va_arg para extraer cada argumento uno por uno.
tipo valor = va_arg(args, tipo);

游댳 args: La lista de argumentos.
游댳 tipo: El tipo de dato del argumento que queremos extraer (int, double, char *, etc.).

va_arg se debe llamar varias veces si queremos leer varios valores.

4. va_copy (Copiar la lista de argumentos)
Se usa cuando queremos copiar la lista de argumentos para procesarla en otro lugar sin modificar la original.

va_copy(nueva_lista, lista_original);

游댳 nueva_lista: Ser치 la copia de lista_original.
游댳 lista_original: La lista de argumentos original que queremos copiar.

Nota: Hay que llamar a va_end en ambas listas.

5. va_end (Finalizar la lista de argumentos)
Cuando terminamos de usar la lista de argumentos, debemos cerrarla con va_end para liberar recursos.

va_end(args);

游댳 args: La lista de argumentos que queremos finalizar.

Si no usas va_end, podr칤as tener comportamientos inesperados en algunos sistemas.


